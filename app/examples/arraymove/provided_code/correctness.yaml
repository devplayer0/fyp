steps:
  - id: cases
    type: passthrough
    description: Set up test cases
    input:
      input:
        - name: Default
          array: [40,41,42,43,44,45,46,47,48,49]
          i: 9
          j: 5
        - name: Other
          array: [32,13,55,22,83,12,99]
          i: 3
          j: 5
      a: []
      b: []
      correct: 0

  - id: symtab
    type: symtab
    input: perfgrade.elf

  - id: eval_cases
    type: mapped
    input:
      items: !expr cases.input
      step:
        type: pipeline
        input:
          steps:
            - id: eval
              type: evaluate
              description: !expr f'Evaluate "{item.name}" {item.array} - {item.i} -> {item.j}'
              input:
                type: simulation
                #type: hardware
                timeout: 10
                #debug: true

                gem5: /opt/gem5
                #extra_args: [--wait-gdb]
                variant: fast
                #variant: opt
                #extra_options:
                #  pack: /opt/perfgrade/stm32f4.pack
                #start_addr: !expr symtab['Main']
                #done_addr: !expr symtab['test_end']
                #probes:
                #  - 066CFF303430484257251617
                #  - 0671FF485648756687013343
                #  #- 0668FF303430484257255736
                #  #- 066DFF303430484257142139

                firmware: perfgrade.bin

                test_data:
                  addr: !expr symtab['i']
                  data: !expr struct.pack('<II' + ('I'*len(item.array)), item.i, item.j, *item.array)
                  when: !expr symtab[('main', 2)]

                dump_ranges:
                  - start: !expr symtab['array']
                    size: !expr len(item.array) * 4

            - id: results
              type: exec
              description: Parse results
              input: |
                a = item.array
                a.insert(item.j, a.pop(item.i))
                b = list(struct.unpack("<" + ("I"*len(item.array)), eval.dump[0]))

                cases.a.append(f'{item.name}: {a}')
                cases.b.append(f'{item.name}: {b}')

                if a == b:
                    cases.correct += 1

  - id: compare
    type: diff
    description: Compare outputs
    input:
      a: !expr cases.a
      b: !expr cases.b

  - id: write_diff
    description: Write diff to file
    type: exec
    input: |
      with open('diff.txt', 'w') as f:
          f.write(compare.diff)

  - id: write_submitty_results
    description: Generate Submitty validator JSON
    type: exec
    input: |
      r = Box(status='success', data=Box())
      if cases.correct == len(cases.input):
          # Success messages are ignored, don't bother...
          r.data.score = 1
          r.data.status = 'success'
      else:
          r.data.score = cases.correct / len(cases.input)
          r.data.status = 'failure'
          r.data.message = 'Incorrect cases detected (check diff)'

      r.to_json('validation_results.json')
