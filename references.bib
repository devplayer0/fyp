@online{submitty,
    author = "Matthew Peveler and Jeramey Tyler and Samuel Breese and Barbara Cutler and Ana Milanova",
    title = "Submitty: An Open Source, Highly-Configurable Platform for Grading of Programming Assignments",
    month = "mar",
    year = "2017",
    url = "https://github.com/Submitty/Tutorial/raw/main/presentation/Submitty%20Demo%20SIGCSE%20March%2010%202017.pdf"
}
@online{submitty_initial_release,
    author = "{Rensselaer Center for Open Source Software}",
    title = "{Submitty - Initial Server Release}",
    year = "2014",
    month = "may",
    url = "https://github.com/Submitty/Submitty/releases/tag/0.1.1%2F0.1.1"
}
@online{submitty_features,
    author = "{Rensselaer Center for Open Source Software}",
    title = "{Submitty - Features}",
    year = "2020",
    month = "jun",
    url = "https://submitty.org/index/features"
}
@online{submitty_poster,
    author = "Andrea Wong and Beverly Sihsobhon and Melissa Lindquist and Matthew Peveler and Barbara Cutler and Samuel Breese and Eric Tran and Joe Jung and Ben Shaw",
    title = "{User Experience and Feedback on the RPI Homework Submission Server}",
    year = "2016",
    month = "mar",
    url = "https://github.com/Submitty/publications/raw/master/2016_SIGCSE_poster_wong_et_al/final_poster.pdf"
}

@article{online_judge,
    title = "On automated grading of programming assignments in an academic institution",
    journal = "Computers & Education",
    volume = "41",
    number = "2",
    pages = "121 - 131",
    year = "2003",
    issn = "0360-1315",
    doi = "https://doi.org/10.1016/S0360-1315(03)00030-7",
    url = "http://www.sciencedirect.com/science/article/pii/S0360131503000307",
    author = "Brenda Cheang and Andy Kurnia and Andrew Lim and Wee-Chong Oon",
    keywords = "Automated grading, Online judge, Computer science, Education",
    abstract = "Practise is one of the most important steps in learning the art of computer programming. Unfortunately, human grading of programming assignments is a tedious and error-prone task, a problem compounded by the large enrolments of many programming courses. As a result, students in such courses tend to be given fewer programming assignments than should be ideally given. One solution to this problem is to automate the grading process such that students can electronically submit their programming assignments and receive instant feedback. This paper studies the implementation of one such automated grading system, called the Online Judge, in the School of Computing of the National University of Singapore for a compulsory first-year course that teaches basic programming techniques with over 700 students, describing the student reactions and behavior as well as the difficulties encountered. The Online Judge was also successfully employed for an advanced undergraduate course and an introductory high school course."
}

@article{armv7m,
    author = "ARM",
    title = "{ARM® v7-M Architecture Reference Manual}",
    month = "jun",
    year = "2006",
    url = "https://developer.arm.com/documentation/ddi0403/ee"
}
@article{cortex_m4,
    author = "ARM",
    title = "{Cortex-M4 Technical Reference Manual}",
    month = "mar",
    year = "2010",
    url = "https://developer.arm.com/documentation/ddi0439/b/"
}

@article{stm32f407,
    author = "STMicroelectronics",
    title = "{STM32F405/415, STM32F407/417, STM32F427/437 and STM32F429/439 advanced Arm®-based 32-bit MCUs - Reference manual}",
    month = "feb",
    year = "2021",
    url = "https://www.st.com/resource/en/user_manual/dm00039084-discovery-kit-with-stm32f407vg-mcu-stmicroelectronics.pdf"
}
@article{stm32f4_discovery,
    author = "STMicroelectronics",
    title = "{Discovery kit with STM32F407VG MCU - User manual}",
    month = "oct",
    year = "2020",
    url = "https://www.st.com/resource/en/user_manual/dm00039084-discovery-kit-with-stm32f407vg-mcu-stmicroelectronics.pdf"
}

@article{arm_swd,
    author = "ARM",
    title = "{Serial Wire Debug}",
    month = "apr",
    year = "2021",
    url = "https://developer.arm.com/architectures/system-architectures/system-components/coresight/serial-wire-debug"
}

@article{profiling_tracing,
    author = {Ball, Thomas and Larus, James R.},
    title = {Optimally Profiling and Tracing Programs},
    year = {1994},
    issue_date = {July 1994},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {16},
    number = {4},
    issn = {0164-0925},
    url = {https://doi.org/10.1145/183432.183527},
    doi = {10.1145/183432.183527},
    abstract = {This paper describes algorithms for inserting monitoring code to profile and trace programs. These algorithms greatly reduce the cost of measuring programs with respect to the commonly used technique of placing code in each basic block. Program profiling counts the number of times each basic block in a program executes. Instruction tracing records the sequence of basic blocks traversed in a program execution. The algorithms optimize the placement of counting/tracing code with respect to the expected or measured frequency of each block or edge in a program's control-flow graph. We have implemented the algorithms in a profiling/tracing tool, and they substantially reduce the overhead of profiling and tracing.We also define and study the hierarchy of profiling problems. These  problems have two dimensions: what is profiled (i.e., vertices (basic blocks) or edges in a control-flow graph) and where the instrumentation code is placed (in blocks or along edges). We compare the optimal solutions to the profiling problems and describe a new profiling problem: basic-block profiling with edge counters. This problem is important because an optimal solution to any other profiling problem (for a given control-flow graph) is never better than an optimal solution to this problem. Unfortunately, finding an optimal placement of edge counters for vertex profiling appears to be a hard problem in general. However, our work shows that edge profiling with edge counters works well in practice because it is simple and efficient and finds optimal counter placements in most cases.  Furthermore, it yields more information than a vertex profile. Tracing also benefits from placing instrumentation code along edges rather than on vertices.},
    journal = {ACM Trans. Program. Lang. Syst.},
    month = jul,
    pages = {1319–1360},
    numpages = {42},
    keywords = {instrumentation, control-flow graph, profiling, instruction tracing}
}

@article{gem5,
    author = {Binkert, Nathan and Beckmann, Bradford and Black, Gabriel and Reinhardt, Steven K. and Saidi, Ali and Basu, Arkaprava and Hestness, Joel and Hower, Derek R. and Krishna, Tushar and Sardashti, Somayeh and Sen, Rathijit and Sewell, Korey and Shoaib, Muhammad and Vaish, Nilay and Hill, Mark D. and Wood, David A.},
    title = {The Gem5 Simulator},
    year = {2011},
    issue_date = {May 2011},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {39},
    number = {2},
    issn = {0163-5964},
    url = {https://doi.org/10.1145/2024716.2024718},
    doi = {10.1145/2024716.2024718},
    abstract = {The gem5 simulation infrastructure is the merger of the best aspects of the M5 [4] and GEMS [9] simulators. M5 provides a highly configurable simulation framework, multiple ISAs, and diverse CPU models. GEMS complements these features with a detailed and exible memory system, including support for multiple cache coherence protocols and interconnect models. Currently, gem5 supports most commercial ISAs (ARM, ALPHA, MIPS, Power, SPARC, and x86), including booting Linux on three of them (ARM, ALPHA, and x86).The project is the result of the combined efforts of many academic and industrial institutions, including AMD, ARM, HP, MIPS, Princeton, MIT, and the Universities of Michigan, Texas, and Wisconsin. Over the past ten years, M5 and GEMS have been used in hundreds of publications and have been downloaded tens of thousands of times. The high level of collaboration on the gem5 project, combined with the previous success of the component parts and a liberal BSD-like license, make gem5 a valuable full-system simulation tool.},
    journal = {SIGARCH Comput. Archit. News},
    month = aug,
    pages = {1–7},
    numpages = {7}
}

@INPROCEEDINGS{marss,
    author={A. {Patel} and F. {Afram} and S. {Chen} and K. {Ghose}},
    booktitle={2011 48th ACM/EDAC/IEEE Design Automation Conference (DAC)},
    title={MARSS: A full system simulator for multicore x86 CPUs},
    year={2011}, volume={}, number={}, pages={1050-1055}, doi={}}

@online{wall_time,
    title = "Wall time",
    month = "jun",
    year = "2011",
    url = "http://www.catb.org/jargon/html/W/wall-time.html"
}

@ONLINE {qemu,
    author = "{QEMU team}",
    title  = "QEMU",
    month  = "apr",
    year   = "2021",
    url    = "https://www.qemu.org"
}
@ONLINE {qemu_tcg,
    author = "{QEMU team}",
    title  = "QEMU Translator Internals",
    month  = "mar",
    year   = "2020",
    url    = "https://gitlab.com/qemu-project/qemu/-/blob/master/docs/devel/tcg.rst"
}

@ONLINE {xpack,
    author = "Liviu Ionescu",
    title  = "The xPack Project",
    month  = "mar",
    year   = "2021",
    url    = "https://xpack.github.io/"
}
@ONLINE {xpack_qemu,
    author = "Liviu Ionescu",
    title  = "The xPack QEMU Arm",
    month  = "mar",
    year   = "2021",
    url    = "https://xpack.github.io/qemu-arm/"
}

@ONLINE {unicorn,
    author = "Anh Quynh, Nguyen and Hoang Vu, Dang",
    title  = "Unicorn: Next Generation CPU Emulator Framework",
    month  = "aug",
    year   = "2015",
    url    = "https://www.unicorn-engine.org/BHUSA2015-unicorn.pdf"
}

@ONLINE {devops,
    author = "Microsoft",
    title  = "{What is DevOps?}",
    month  = "apr",
    year   = "2021",
    url    = "https://azure.microsoft.com/en-us/overview/what-is-devops/"
}
@ONLINE {github_actions,
    author = "{GitHub Inc}",
    title  = "{Workflow syntax for GitHub Actions}",
    month  = "apr",
    year   = "2021",
    url    = "https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions"
}

@online{revealjs,
    author = "El Hattab, Hakim",
    title = "{The HTML Presentation Framework}",
    month = "may",
    year = "2020",
    url = "https://revealjs.com"
}
@online{github_pages,
    author = "{GitHub Inc}",
    title = "{About GitHub Pages}",
    month = "apr",
    year = "2021",
    url = "https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages"
}

@ONLINE {blender_nodes,
    author = "{The Blender Foundation}",
    title  = "{Blender Nodes - Introduction}",
    month  = "feb",
    year   = "2021",
    url    = "https://docs.blender.org/manual/en/2.92/interface/controls/nodes/introduction.html"
}

@online{yaml,
    author = "{The YAML Project}",
    title = "{The Official YAML Web Site}",
    month = "may",
    year = "2020",
    url = "https://yaml.org"
}
@online{yaml_spec,
    author = "{The YAML Project}",
    title = "{YAML Ain't Markup Language Version 1.2}",
    month = "oct",
    year = "2009",
    url ="https://yaml.org/spec/1.2/spec.html"
}
@online{yaml_multiline,
    author = "Wolfgang Faust",
    title = "{YAML Multiline Strings}",
    month = "sep",
    year = "2020",
    url = "https://yaml-multiline.info"
}

@online{intro_computing,
    author = "Jonathan Dukes",
    title = "{CSU11021 - Introduction to Computing I}",
    year = "2020",
    month = "sep",
    url = "https://teaching.scss.tcd.ie/module/csu11021-introduction-to-computing-i/"
}

@article{instant_feedback,
    author = {Singh, Rishabh and Gulwani, Sumit and Solar-Lezama, Armando},
    title = {Automated Feedback Generation for Introductory Programming Assignments},
    year = {2013},
    issue_date = {June 2013},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {48},
    number = {6},
    issn = {0362-1340},
    url = {https://doi.org/10.1145/2499370.2462195},
    doi = {10.1145/2499370.2462195},
    abstract = {We present a new method for automatically providing feedback for introductory programming problems. In order to use this method, we need a reference implementation of the assignment, and an error model consisting of potential corrections to errors that students might make. Using this information, the system automatically derives minimal corrections to student's incorrect solutions, providing them with a measure of exactly how incorrect a given solution was, as well as feedback about what they did wrong.We introduce a simple language for describing error models in terms of correction rules, and formally define a rule-directed translation strategy that reduces the problem of finding minimal corrections in an incorrect program to the problem of synthesizing a correct program from a sketch. We have evaluated our system on thousands of real student attempts obtained from the Introduction to Programming course at MIT (6.00) and MITx (6.00x). Our results show that relatively simple error models can correct on average 64% of all incorrect submissions in our benchmark set.},
    journal = {SIGPLAN Not.},
    month = jun,
    pages = {15–26},
    numpages = {12},
    keywords = {computer-aided education, automated grading, program synthesis}
}

@article{embedinsight,
   title={EmbedInsight: Automated Grading of Embedded Systems Assignments},
   author={Hao Li and Bo-Jhang Ho and Bharathan Balaji and Yue Xin and P. Martin and M. Srivastava},
   journal={ArXiv},
   year={2017},
   volume={abs/1703.04514}
}

@inproceedings{testing_strategies,
    author = {Wilcox, Chris},
    title = {Testing Strategies for the Automated Grading of Student Programs},
    year = {2016},
    isbn = {9781450336857},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/2839509.2844616},
    doi = {10.1145/2839509.2844616},
    abstract = {Enrollments in introductory computer science courses are growing rapidly, thereby taxing scarce teaching resources and motivating the increased use of automated tools for program grading. Such tools commonly rely on regression testing methods from industry. However, the goals of automated grading differ from those of testing for software production. In academia, a primary motivation for testing is to provide timely and accurate feedback to students so that they can understand and fix defects in their programs. Testing strategies for program grading are therefore distinct from those of traditional software testing. This paper enumerates and describes a number of testing strategies that improve the quality of feedback for different types of programming assignments.},
    booktitle = {Proceedings of the 47th ACM Technical Symposium on Computing Science Education},
    pages = {437–442},
    numpages = {6},
    keywords = {automated grading, automated assessment},
    location = {Memphis, Tennessee, USA},
    series = {SIGCSE '16}
}

@online{tech_debt,
    title = "Technical Debt",
    author = "{Technopedia}",
    year = "2016",
    month = "aug",
    url = "https://www.techopedia.com/definition/27913/technical-debt"
}
