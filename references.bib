@online{submitty,
    author = "Matthew Peveler, Jeramey Tyler, Samuel Breese, Barbara Cutler, and Ana Milanova",
    title = "Submitty: An Open Source, Highly-Configurable Platform for Grading of Programming Assignments",
    month = "mar",
    year = "2017",
    url = "https://github.com/Submitty/Tutorial/raw/master/presentation/Submitty%20Demo%20SIGCSE%20March%2010%202017.pdf"
}
@online{submitty_initial_release,
    author = "Rensselaer Center for Open Source Software",
    title = "Initial Server Release",
    year = "2014",
    month = "may",
    url = "https://github.com/Submitty/Submitty/releases/tag/0.1.1%2F0.1.1"
}
@online{submitty_features,
    author = "Rensselaer Center for Open Source Software",
    title = "Submitty - Features",
    url = "https://submitty.org/index/features"
}

@article{online_judge,
    title = "On automated grading of programming assignments in an academic institution",
    journal = "Computers & Education",
    volume = "41",
    number = "2",
    pages = "121 - 131",
    year = "2003",
    issn = "0360-1315",
    doi = "https://doi.org/10.1016/S0360-1315(03)00030-7",
    url = "http://www.sciencedirect.com/science/article/pii/S0360131503000307",
    author = "Brenda Cheang and Andy Kurnia and Andrew Lim and Wee-Chong Oon",
    keywords = "Automated grading, Online judge, Computer science, Education",
    abstract = "Practise is one of the most important steps in learning the art of computer programming. Unfortunately, human grading of programming assignments is a tedious and error-prone task, a problem compounded by the large enrolments of many programming courses. As a result, students in such courses tend to be given fewer programming assignments than should be ideally given. One solution to this problem is to automate the grading process such that students can electronically submit their programming assignments and receive instant feedback. This paper studies the implementation of one such automated grading system, called the Online Judge, in the School of Computing of the National University of Singapore for a compulsory first-year course that teaches basic programming techniques with over 700 students, describing the student reactions and behavior as well as the difficulties encountered. The Online Judge was also successfully employed for an advanced undergraduate course and an introductory high school course."
}

@article{armv7m,
    author = "ARM",
    title = "{ARM® v7-M Architecture Reference Manual}",
    month = "jun",
    year = "2006",
    url = "https://static.docs.arm.com/ddi0403/e/DDI0403E_B_armv7m_arm.pdf"
}

@article{profiling_tracing,
    author = {Ball, Thomas and Larus, James R.},
    title = {Optimally Profiling and Tracing Programs},
    year = {1994},
    issue_date = {July 1994},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {16},
    number = {4},
    issn = {0164-0925},
    url = {https://doi.org/10.1145/183432.183527},
    doi = {10.1145/183432.183527},
    abstract = {This paper describes algorithms for inserting monitoring code to profile and trace programs. These algorithms greatly reduce the cost of measuring programs with respect to the commonly used technique of placing code in each basic block. Program profiling counts the number of times each basic block in a program executes. Instruction tracing records the sequence of basic blocks traversed in a program execution. The algorithms optimize the placement of counting/tracing code with respect to the expected or measured frequency of each block or edge in a program's control-flow graph. We have implemented the algorithms in a profiling/tracing tool, and they substantially reduce the overhead of profiling and tracing.We also define and study the hierarchy of profiling problems. These  problems have two dimensions: what is profiled (i.e., vertices (basic blocks) or edges in a control-flow graph) and where the instrumentation code is placed (in blocks or along edges). We compare the optimal solutions to the profiling problems and describe a new profiling problem: basic-block profiling with edge counters. This problem is important because an optimal solution to any other profiling problem (for a given control-flow graph) is never better than an optimal solution to this problem. Unfortunately, finding an optimal placement of edge counters for vertex profiling appears to be a hard problem in general. However, our work shows that edge profiling with edge counters works well in practice because it is simple and efficient and finds optimal counter placements in most cases.  Furthermore, it yields more information than a vertex profile. Tracing also benefits from placing instrumentation code along edges rather than on vertices.},
    journal = {ACM Trans. Program. Lang. Syst.},
    month = jul,
    pages = {1319–1360},
    numpages = {42},
    keywords = {instrumentation, control-flow graph, profiling, instruction tracing}
}

@article{gem5,
    author = {Binkert, Nathan and Beckmann, Bradford and Black, Gabriel and Reinhardt, Steven K. and Saidi, Ali and Basu, Arkaprava and Hestness, Joel and Hower, Derek R. and Krishna, Tushar and Sardashti, Somayeh and Sen, Rathijit and Sewell, Korey and Shoaib, Muhammad and Vaish, Nilay and Hill, Mark D. and Wood, David A.},
    title = {The Gem5 Simulator},
    year = {2011},
    issue_date = {May 2011},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {39},
    number = {2},
    issn = {0163-5964},
    url = {https://doi.org/10.1145/2024716.2024718},
    doi = {10.1145/2024716.2024718},
    abstract = {The gem5 simulation infrastructure is the merger of the best aspects of the M5 [4] and GEMS [9] simulators. M5 provides a highly configurable simulation framework, multiple ISAs, and diverse CPU models. GEMS complements these features with a detailed and exible memory system, including support for multiple cache coherence protocols and interconnect models. Currently, gem5 supports most commercial ISAs (ARM, ALPHA, MIPS, Power, SPARC, and x86), including booting Linux on three of them (ARM, ALPHA, and x86).The project is the result of the combined efforts of many academic and industrial institutions, including AMD, ARM, HP, MIPS, Princeton, MIT, and the Universities of Michigan, Texas, and Wisconsin. Over the past ten years, M5 and GEMS have been used in hundreds of publications and have been downloaded tens of thousands of times. The high level of collaboration on the gem5 project, combined with the previous success of the component parts and a liberal BSD-like license, make gem5 a valuable full-system simulation tool.},
    journal = {SIGARCH Comput. Archit. News},
    month = aug,
    pages = {1–7},
    numpages = {7}
}

@INPROCEEDINGS{marss,
    author={A. {Patel} and F. {Afram} and S. {Chen} and K. {Ghose}},
    booktitle={2011 48th ACM/EDAC/IEEE Design Automation Conference (DAC)},
    title={MARSS: A full system simulator for multicore x86 CPUs},
    year={2011}, volume={}, number={}, pages={1050-1055}, doi={}}
